# 1. Программы состоят из модулей
# 2. Модули содержат операторы
# 3. Операторы содержат выражения
# 4. Выражения создают и обрабатывают объекты


# int
# float
# complex
#
# + - * / // % **
# & | ^ >> <<
# == != > < >= <=
# and or not


# 1. переменные создаются, когда им впервые присваивается значение
# 2. переменные заменяются своими значениями при использовании в выражениях
# 3. перед применением в выражениях переменным должны быть присвоены значения
# 4. переменные ссылаются на объекты и не объявляются заранее
#
#
# IEEE 754
#
#
# a = 3
#
#
# Объекты:
# неизменяемые (immutable) - нельзя изменить значение
# изменяемые (mutable)
#     list
#     dict
#     set
#     некоторые class
#
#
# list - список - упорядоченная коллекция объектов
#
# Слайсы
# [начало:конец:шаг]
#
# NULL
#
#
#
# tuple - кортеж - неизменяемая упорядоченная коллекция
#
#
# dict - словарь - изменяемая упорядоченная коллекция с доступом по ключу (изменяемое отображение,
#         ассоциативный массив)
#
#         пары ключ-значение
#
#         ключ - неизменяемый тип
#
#         хэш-таблица
#
#
# JSON - JavaScript Object Notation
d = {
       "firstName": "Иван",
       "lastName": "Иванов",
       "address": {
           "streetAddress": "Московское ш., 101, кв.101",
           "city": "Ленинград",
           "postalCode": 101101
       },
       "phoneNumbers": [
           "812 123-1234",
           "916 123-4567"
       ]
}


# Составной оператор
#
# if (x > 0)
# {
#     y = 123;
#     printf(...);
# }
#
#
# :
#
# if x > 0:
#     y = 123
#     print(...)


# Заголовок:
#     блок кода - посл-ть операторов, вложенная под заголовок


# if условие1:
#     оператор1
# elif условие2:
#     оператор2
# else:
#     оператор3

# Поток управления


# bool
# - все объекты имеют булевское значение (истина/ложь)
# - ненулевое число и непустая коллекция - истина
# - сравнения и проверки на равенство применяются рекурсивно
# - сравнения и проверки на равенство возвращают True или False (спец. версии констант 1 и 0)
# - булевские операции прекращают оценку, как только результат известен (ленивые вычисления)


# Тернарное выражение
if x:
    a = y
else:
    a = z

a = y if x > 5 else z

# возвращаемое значение!
# значение_если_истина if условие else значение_если_ложь


x = 0
y = 10
z = 99
w = -1

a = (w) if (x + y < 0) else (y if x > 5 else z)

print(a)


# while условие:
#     оператор1
# else:
#     оператор2


s = 'spam'

while s:
    print(s)
    s = s[:-1]
else:
    print('empty')



# break - переходит за пределы ближайшего заключающего цикла
# continue - переходит в начало ближайшего заключающего цикла
# pass - пустой оператор


# for цель in объект:
#     оператор1
# else:
#     оператор2


# 1. Объект - итерируемый объект (объект, поддерживающий протокол итерации)
#             коллекции и т.п.
#
# 2. Элементы объекта по очереди связываются с целью (за 1 итерацию - 1 эл-т)
#
# 3. Дошли до конца объекта - итерации прекращаются


d = {1: 'one', 2: 'two', 3: 'three'}

for key, value in d.items():
    print(f'{key}: {value}')

range(10) # 0..9
range(1, 10) # 1..9

range(1, 10, 2)



for _ in range(10):
    print('spam')
